diff a/webapp/tests/nru/organizations.spec.ts b/webapp/tests/nru/organizations.spec.ts	(rejected hunks)
@@ -8,14 +8,14 @@ test.describe.configure({ mode: 'serial' });
 
 let page: Page;
 let orgName: string;
+let orgId: string;
 
 test('it should create an organization', async ({ browser }) => {
 	page = await userLogin(browser, 'A');
-	await expect(page).toHaveURL('/my');
 
 	await page.goto('/my/organizations');
 
-	await page.getByRole('link', { name: 'plus Create a new organization' }).click();
+	await page.getByRole('link', { name: 'Create a new organization plus' }).click();
 	await expect(page).toHaveURL('/my/organizations/create');
 
 	orgName = `org-${randomId()}`;
@@ -24,101 +24,86 @@ test('it should create an organization', async ({ browser }) => {
 	await page.getByRole('button', { name: 'Create organization' }).click();
 	await expect(page).toHaveURL(new RegExp('/my/organizations/(.*)'));
 	await expect(page.getByRole('heading', { name: orgName })).toBeVisible();
+
+	orgId = page.url().split('/').at(-1);
 });
 
 test('it should edit organization name', async () => {
-	await page.getByRole('link', { name: 'General' }).click();
+	await page.getByRole('tab', { name: 'cog Settings' }).click();
+	await expect(page).toHaveURL(/my\/organizations\/[^/]+\/settings/);
+
 	await page.locator('input[name="name"]').click();
 
 	orgName = `org-${randomId()}`;
 	await page.locator('input[name="name"]').fill(orgName);
 	await page.getByRole('button', { name: 'Save changes' }).click();
-	await expect(page.getByRole('heading', { name: orgName })).toBeVisible();
+	// await expect(page.getByRole('heading', { name: orgName })).toBeVisible();
 });
 
 test('it should add user B to the organization as admin', async () => {
+	await page.getByRole('tab', { name: 'users Members' }).click();
+	await expect(page).toHaveURL(/my\/organizations\/[^/]+\/members/);
+
 	let username = 'userB';
-	let email = `${username}@example.org`;
 	let role = 'admin';
-	await page.getByRole('link', { name: 'Members' }).click();
-	await page.getByRole('button', { name: 'plus Add entry' }).click();
-	await page.locator('form div').filter({ hasText: 'Select' }).nth(3).click();
-	await page.getByPlaceholder('Select').fill(username);
-	await page.getByText(email).click();
-	await page.locator('select[name="role"]').selectOption({ label: role });
-	await page.getByRole('button', { name: 'Create record' }).click();
-	await expect(
-		page
-			.locator('tr')
-			.filter({ has: page.getByText(email) })
-			.filter({ has: page.getByText(role) })
-	).toBeVisible();
+	await addMemberWithRole(page, username, role);
+	await expect(page.getByRole('dialog')).toBeHidden();
+	await expect(page.getByText(`${username} ${role}`)).toBeVisible();
 });
 
 test('it should add user C to the organization as member', async () => {
 	let username = 'userC';
-	let email = `${username}@example.org`;
-	let role = 'member';
-	await page.getByRole('button', { name: 'plus Add entry' }).click();
-	await page.locator('form div').filter({ hasText: 'Select' }).nth(3).click();
-	await page.getByPlaceholder('Select').fill(username);
-	await page.getByText(email).click();
-	await page.locator('select[name="role"]').selectOption({ label: role });
-	await page.getByRole('button', { name: 'Create record' }).click();
-	await expect(
-		page
-			.locator('tr')
-			.filter({ has: page.getByText(email) })
-			.filter({ has: page.getByText(role) })
-	).toBeVisible();
+	await addMemberWithRole(page, username, 'member');
+	await expect(page.getByRole('dialog')).toBeHidden();
+	await expect(page.getByText(username)).toBeVisible();
 });
 
 test('it should fail to add A as member', async () => {
-	let username = 'userA';
-	let email = `${username}@example.org`;
-	let role = 'member';
-	await page.getByRole('button', { name: 'plus Add entry' }).click();
-	await page.locator('form div').filter({ hasText: 'Select' }).nth(3).click();
-	await page.getByPlaceholder('Select').fill(username);
-	await page.getByRole('dialog').getByRole('document').getByText(email).click();
-	await page.locator('select[name="role"]').selectOption({ label: role });
-	await page.getByRole('button', { name: 'Create record' }).click();
+	await addMemberWithRole(page, 'userA', 'member');
 	await expect(page.getByText('Failed to create record.')).toBeVisible();
 });
 
-test("it should hide the 'general' section to admin", async ({ browser }) => {
+test.skip("it should hide the 'settings' section to admin", async ({ browser, page }) => {
 	page.close();
 	page = await userLogin(browser, 'B');
 	await page.goto('/my/organizations');
 
-	await expect(page.getByText(orgName)).toBeVisible();
+	await expect(page.getByRole('main').getByText(orgName)).toBeVisible();
 
 	const settingsButton = page.getByTestId(`${orgName} link`);
-	await expect(settingsButton).toBeVisible();
-	await settingsButton.click();
-
-	await expect(page.getByText('general')).toBeHidden();
-	await expect(page.getByText('members')).toBeVisible();
+	await expect(settingsButton).toBeHidden();
 
-	const orgUrl = page.url();
+	await page.getByRole('main').getByRole('link', { name: orgName }).click();
+	await expect(page.getByRole('tab', { name: 'cog Settings' })).toBeHidden();
 
-	await page.goto(`${orgUrl}/general`);
+	await page.goto(`/my/organizations/${orgId}/settings`);
 	await expect(page.getByText('unauthorized')).toBeVisible();
-
-	await page.goto(`${orgUrl}/members`);
-	await expect(page.getByRole('button', { name: 'Add entry' })).toBeVisible();
 });
 
-test("it should hide the 'settings' section to user", async ({ browser }) => {
+test.skip("it should hide the 'settings' section to user", async ({ browser, page }) => {
 	page.close();
 	page = await userLogin(browser, 'C');
 	await page.goto('/my/organizations');
 
-	await expect(page.getByText(orgName)).toBeVisible();
+	await expect(page.getByRole('main').getByText(orgName)).toBeVisible();
 
 	const settingsButton = page.getByTestId(`${orgName} link`);
 	await expect(settingsButton).toBeHidden();
 
-	await expect(page.getByText('general')).toBeHidden();
-	await expect(page.getByText('members')).toBeHidden();
+	await page.getByRole('main').getByRole('link', { name: orgName }).click();
+	await expect(page.getByRole('tab', { name: 'cog Settings' })).toBeHidden();
+	await expect(page.getByRole('tab', { name: 'users Members' })).toBeHidden();
 });
+
+async function addMemberWithRole(page: Page, username: string, role: string) {
+	await page.getByRole('button', { name: 'plus Add new member' }).click();
+
+	await page.locator('.sv-content').click();
+	await page.getByPlaceholder('Select').fill(username);
+	await expect(page.locator('.sv-item').filter({ hasText: username })).toBeVisible();
+	await page.getByPlaceholder('Select').press('Enter');
+
+	await page.locator('select[name="role"]').selectOption({ label: role });
+
+	await page.getByRole('button', { name: 'Create record' }).click();
+}
