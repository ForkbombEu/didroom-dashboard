diff a/webapp/src/lib/components/relationsManager.svelte b/webapp/src/lib/components/relationsManager.svelte	(rejected hunks)
@@ -4,7 +4,8 @@
 
 <script lang="ts">
 	import { pb } from '$lib/pocketbase';
-	import type { Record as PBRecord } from 'pocketbase';
+	import type { PBRecord, PBResponse } from '$lib/utils/types';
+	import { createTypeProp } from '$lib/utils/typeProp';
 
 	import RecordSelect from './recordSelect.svelte';
 	import RecordSearch from './recordSearch.svelte';
@@ -22,8 +23,15 @@
 
 	//
 
+	type RecordGeneric = $$Generic<PBRecord>;
+	export let recordType = createTypeProp<RecordGeneric>();
+	recordType;
+
+	//
+
 	let tempIDs: string[] = [];
-	let tempRecords: Record<string, PBRecord> = {};
+	let tempRecords: Record<string, PBResponse<RecordGeneric>> = {};
+
 	$: {
 		if (Array.isArray(relation)) tempIDs = relation;
 		else if (relation) tempIDs = [relation];
@@ -32,7 +40,9 @@
 
 	async function loadRecords() {
 		const data = await Promise.all(
-			tempIDs.map((id) => pb.collection(collection).getOne(id, { $autoCancel: false }))
+			tempIDs.map((id) =>
+				pb.collection(collection).getOne<PBResponse<RecordGeneric>>(id, { $autoCancel: false })
+			)
 		);
 		data.forEach((d) => {
 			tempRecords[d.id] = d;
@@ -50,7 +60,7 @@
 
 	$: disabled = multiple && !!max && relation.length >= max;
 
-	function handleSelect(e: CustomEvent<{ record: PBRecord }>) {
+	function handleSelect(e: CustomEvent<{ record: PBResponse<PBRecord> }>) {
 		const data = e.detail.record;
 		if (multiple) relation = [...relation, data.id];
 		else relation = data.id;
